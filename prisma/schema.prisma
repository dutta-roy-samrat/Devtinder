generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ConnectionStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model User {
  id          Int      @id @default(autoincrement()) @db.Integer
  firstName   String   @map("first_name") @db.VarChar(50)
  lastName    String   @map("last_name") @db.VarChar(50)
  email       String   @unique @db.VarChar(254)
  dateOfBirth DateTime @map("date_of_birth") @db.Date
  createdAt   DateTime @default(now()) @map("created_at") @db.Date
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Date
  profile     Profile?
  password    String   @db.Text
  gender      Gender
  skills      Skill[]  @relation("UserSkills")

  sentConnections     Connections[] @relation("SentConnections")
  receivedConnections Connections[] @relation("ReceivedConnections")
}

model Profile {
  userId     Int     @id @map("user_id") @db.Integer
  profile    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileUrl String? @map("profile_url") @db.VarChar(255)
  bio        String? @default("Looking to connect and talk about tech") @db.Text
}

model Skill {
  id    Int    @id @default(autoincrement()) @db.Integer
  name  String @unique @db.VarChar(100)
  users User[] @relation("UserSkills")
}

model Connections {
  id          Int              @id @default(autoincrement()) @db.Integer
  requesteeId Int              @map("requester_id") @db.Integer
  receiverId  Int              @map("receiver_id") @db.Integer
  createdAt   DateTime         @default(now()) @db.Timestamp()
  status      ConnectionStatus @default(PENDING)

  requestee User @relation("SentConnections", fields: [requesteeId], references: [id])
  receiver  User @relation("ReceivedConnections", fields: [receiverId], references: [id])

  @@unique([requesteeId, receiverId])
  @@index([requesteeId])
  @@index([receiverId])
}
